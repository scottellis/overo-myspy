A minimal driver to start experimenting with SPI devices using a 
Gumstix Overo.

1. Uses the dynamic spi configuration functions spi_alloc_device()
   and spi_add_device(). Makes it easier to get started not having
   to modify a board file. 

   The driver still requires the spi master controller omap2_mcspi loaded 
   either static or dynamic. It will nag if not found. 

2. Implements full-duplex synchronous transfers. 
   
3. It's a char device with only open and write implemented. It's just
   for testing so myspy_write() is where I'm putting all my test code.
 
4. All the output is via printk(KERN_ALERT) 

5. You'll need the patches to omap2_mcspi included in the project or
   the dynamic adding of the myspy spi device will fail.  

   Update: These patches got accepted into 2.6.34 mainline.

6. If you don't have a build environment setup, use the overo-source-me.txt 
   to use the OE cross-tools. After that the Makefile should just work. 

7. Do a global search and replace of 'myspy' in myspy.c and the Makefile
   and then rename myspy.c to <your-name>.c. That should get it working with
   a better name for your device.

I did some testing with bigger frames, greater then 7 which triggers the
DMA code in omap2_mcspi rather then the PIO mode. I always get errors from
the omap2_mcspi driver on the last rx byte regardless of length. The data 
looks good on the signal analyzer though. Need to dig into the omap2_mcspi 
code and figure this out. Frames smaller then 8 bytes work okay though.
 
Feedback welcome.
  
